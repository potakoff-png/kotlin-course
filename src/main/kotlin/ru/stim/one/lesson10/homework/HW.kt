package ru.stim.one.lesson10.homework

import java.time.LocalDate
import javax.xml.crypto.Data

fun main() {
//Задачи на работу со словарём
//Создайте пустой неизменяемый словарь, где ключи и значения - целые числа.
    val a = mapOf<Int, Int>()
//Создайте словарь, инициализированный несколькими парами "ключ-значение", где ключи - float, а значения - double
    val b = mapOf<Float, Double>(13245f to 123.45, 123f to 345.34)
//Создайте изменяемый словарь, где ключи - целые числа, а значения - строки.
    val c = mutableMapOf<Int, String>()
//Имея изменяемый словарь, добавьте в него новые пары "ключ-значение".
    c[123] = "Fly"
//Используя словарь из предыдущего задания, извлеките значение, используя ключ. Попробуй получить значение с ключом, которого в словаре нет.
    println(c[124])
//Удалите определенный элемент из изменяемого словаря по его ключу.
    c.remove(123)
//Создайте словарь (ключи Double, значения Int) и выведи в цикле результат деления ключа на значение. Не забудь обработать деление на 0 (в этом случае выведи слово “бесконечность”)
    val d = mapOf<Double, Int>(10.0 to 2, 15.0 to 3, 20.0 to 0)
    for ((key, value) in d) {
        val result = if (value == 0) {
            "бесконечность"
        } else {
            key / value
        }
        println("Ключ: $key, Значение: $value → результат деления: $result")
    }
//Измените значение для существующего ключа в изменяемом словаре.
    c[123] = "Swim"
    println(c[123])
//Создайте два словаря и объедините их в третьем изменяемом словаре через циклы.
    val e = mapOf<Int, Int>(1 to 2, 3 to 4, 4 to 5)
    val f = mapOf<Int, Int>(5 to 6, 7 to 8, 9 to 10)
    val merged = mutableMapOf<Int, Int>()
        for ((key, value) in e) {
            merged[key] = value
        }
        for ((key, value) in f) {
            merged[key] = value
        }
    println("Объединённый словарь: $merged")
//Создайте словарь, где ключами являются строки, а значениями - списки целых чисел. Добавьте несколько элементов в этот словарь.
    val g = mutableMapOf<String, MutableList<Int>>()
    g["one"] = mutableListOf(1,2,3)
    g["two"] = mutableListOf(4,5,6)
//Создай словарь, в котором ключи - это целые числа, а значения - изменяемые множества строк. Добавь данные в словарь.
//Получи значение по ключу (это должно быть множество строк) и добавь в это множество ещё строку. Распечатай полученное множество.
    val h = mutableMapOf<Int, MutableSet<String>>()
    h[1] = mutableSetOf("Вася", "Друг")
    h[2] = mutableSetOf("Петя", "Враг")
    val k = h[1]
    k?.add("Екатерина")
    println(k)
//Создай словарь, где ключами будут пары чисел. Через перебор найди значение у которого пара будет содержать цифру 5 в качестве первого или второго значения.
    val l = mutableMapOf(
        Pair(1, 2) to "Первая запись",
        Pair(5, 3) to "Вторая запись",
        Pair(7, 8) to "Третья запись",)
    for ((key, value) in l) {
        if (key.first == 5 || key.second == 5) {
            println("Ключ: ($key), Значение: $value")
        }
    }

//Задачи на подбор оптимального типа для словаря
//Словарь библиотека: Ключи - автор книги, значения - список книг
    val library = mapOf<String, List<String>>()
//Справочник растений: Ключи - типы растений (например, "Цветы", "Деревья"), значения - списки названий растений
    val biology = mapOf<String, List<String>>()
//Четвертьфинала: Ключи - названия спортивных команд, значения - списки игроков каждой команды
    val chetvert = mapOf<String, Set<String>>()
//Курс лечения: Ключи - даты, значения - список препаратов принимаемых в дату
    val health = mapOf<LocalDate, List<String>>()
//Словарь путешественника: Ключи - страны, значения - словари из городов со списком интересных мест.
    val trevel = mapOf<String, Map<String, List<String>>>()
}